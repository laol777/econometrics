source('C:/my/econometrics/labs/_mult_regr.R', echo=TRUE)
summary(linearModel_x1)
max(X$y)
mean(X$y)
sd(X$y)
ggplot(data = X, aes(x = X$x1, y = X$value)) +
geom_line(aes(x = X$x1, y = X$value, color='Исходное' ), size=1) +
geom_line(aes(x = X$index, y = predict(linearModel_x1), color='Аппрок функция'), size=1.5)
ggplot(data = X, aes(x = X$x1, y = X$value))
ggplot(data = X, aes(x = X$x1, y = X$y))
ggplot(data = X, aes(x = X$x1, y = X$y)) +
geom_line(aes(x = X$x1, y = X$y, color='Исходное' ), size=1) +
geom_line(aes(x = X$x1, y = predict(linearModel_x1), color='Аппрок функция'), size=1.5)
png(filename= "2.png")
ggplot(data = X, aes(x = X$x1, y = X$y)) +
geom_line(aes(x = X$x1, y = X$y, color='Исходное' ), size=1) +
geom_line(aes(x = X$x1, y = predict(linearModel_x1), color='Аппрок функция'), size=1.5)
dev.off()
source('C:/my/econometrics/labs/_mod.R', echo=TRUE)
sctest(X$value ~ X$index, type = "Chow", point = 3)
sctest(XNextVar$value ~ XNextVar$index, type = "Chow", point = 3)
source('C:/my/econometrics/labs/lab1.R', echo=TRUE)
source('C:/my/econometrics/labs/lab1.R', echo=TRUE)
plotNewData(x, y)
png(filename= "res.png")
plotNewData(x, y)
dev.off()
dev.off()
png(filename= "res.png")
plotNewData(x, y)
dev.off()
png(filename= "res.png")
plotNewData(x, y)
dev.off()
plotNewData(x, y)
plotNewData(x, y)
dev.off()
plotNewData(x, y)
plotNewData(x, y)
source('C:/my/econometrics/labs/lab1.R', echo=TRUE)
plotNewData(x, y)
plotNewData(x, y)
plotNewData(x, y)
x <- nd$minSalary
y <- linearCoef[1] + linearCoef[2] * x
plotNewData(x, y)
png(filename= "res.png")
plotNewData(x, y)
dev.off()
plotNewData(x, y)
plotNewData(x, y)
plotNewData(x, y)
plotNewData(x, y) plotNewData(x, y)
plotNewData(x, y) + plotNewData(x, y)
plotNewData(x, y) / plotNewData(x, y)
plotNewData(x, y) \ plotNewData(x, y)
plotNewData(x, y); 2
source('C:/my/econometrics/labs/lab1.R', echo=TRUE)
source('C:/my/econometrics/labs/lab1.R', echo=TRUE)
View(result)
inverseModel <- lm(linearizedDataY~linearizedDataX)
inverseCoef <- coef(inverseModel)
summary(inverseModel)
1:2
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
print(u)
print(l)
}
FosterStuart(c(1, 2, 3))
FosterStuart(c(1, 2, 3, 3, 4))
FosterStuart(c(1, 2, 3, 0, 4))
u <- u[2:length(u)]
l <- l[2:length(l)]
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
u <- u[2:length(u)]
l <- l[2:length(l)]
print(u)
print(l)
}
FosterStuart(c(1, 2, 3, 0, 4))
FosterStuart(c(1, 2, 3, 0, 4, 2))
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
u <- u[2:length(u)]
l <- l[2:length(l)]
d <- u - l
S <- u + l
print(u)
print(l)
print(d)
print(S)
}
FosterStuart(c(1, 2, 3, 0, 4, 2))
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
u <- u[2:length(u)]
l <- l[2:length(l)]
d <- u - l
S <- u + l
print(u)
print(l)
print(d)
print(S)
lf <- sqrt(2 * ln(length(data)) - 3.4253)
ff <- sqrt(2 * ln(length(data)) - 0.8456)
trendD <- d / ff
trendMean <- (S - f^2) / ll
}
FosterStuart(c(1, 2, 3, 0, 4, 2))
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
u <- u[2:length(u)]
l <- l[2:length(l)]
d <- u - l
S <- u + l
print(u)
print(l)
print(d)
print(S)
lf <- sqrt(2 * log(length(data)) - 3.4253)
ff <- sqrt(2 * log(length(data)) - 0.8456)
trendD <- d / ff
trendMean <- (S - f^2) / ll
}
FosterStuart(c(1, 2, 3, 0, 4, 2))
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
u <- u[2:length(u)]
l <- l[2:length(l)]
d <- u - l
S <- u + l
print(u)
print(l)
print(d)
print(S)
lf <- sqrt(2 * log(length(data)) - 3.4253)
ff <- sqrt(2 * log(length(data)) - 0.8456)
trendD <- d / ff
trendMean <- (S - ff^2) / ll
}
FosterStuart(c(1, 2, 3, 0, 4, 2))
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
u <- u[2:length(u)]
l <- l[2:length(l)]
d <- u - l
S <- u + l
print(u)
print(l)
print(d)
print(S)
lf <- sqrt(2 * log(length(data)) - 3.4253)
ff <- sqrt(2 * log(length(data)) - 0.8456)
trendD <- d / ff
trendMean <- (S - ff^2) / lf
}
FosterStuart(c(1, 2, 3, 0, 4, 2))
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
u <- u[2:length(u)]
l <- l[2:length(l)]
d <- u - l
S <- u + l
#print(u)
#print(l)
#print(d)
#print(S)
lf <- sqrt(2 * log(length(data)) - 3.4253)
ff <- sqrt(2 * log(length(data)) - 0.8456)
trendD <- d / ff
trendMean <- (S - ff^2) / lf
print(t.test(trendD))
print(t.test(trendMean))
}
FosterStuart(c(1, 2, 3, 0, 4, 2))
t.test(c(1, 2, 3, 0, 4, 2))
a <- t.test(c(1, 2, 3, 0, 4, 2))
FosterStuart <- function(data)
{
u = c()
l = c()
for(i in c(2:length(data)))
{
u[i] = 1
l[i] = 1
for(j in c(1:(i - 1)))
{
if(data[j] > data[i])
{
u[i] = 0
}
if(data[j] < data[i])
{
l[i] = 0
}
}
}
u <- u[2:length(u)]
l <- l[2:length(l)]
d <- u - l
S <- u + l
lf <- sqrt(2 * log(length(data)) - 3.4253)
ff <- sqrt(2 * log(length(data)) - 0.8456)
trendD <- d / ff
trendMean <- (S - ff^2) / lf
print(t.test(trendD)$p.value)
print(t.test(trendMean)$p.value)
}
FosterStuart(c(1, 2, 3, 0, 4, 2))
source('C:/my/econometrics/labs/_mod.R', echo=TRUE)
FosterStuart(X$value)
FosterStuart(X$value)
plot(X$value, type = "l")
X = data.frame(
index = c(1:61),
value = c(590426,598539,592443,594720,575901,570319,596480,593475,592177,594807,595212,577716,576297,603203,
605376,609844,614798,614393,599636,596120,623175,637830,633386,634110,630271,610160,606666,639621,
631575,622167,621295,634864,621002,613055,645259,654188,648901,655976,658441,636323,630937,660735,
669556,661558,657473,660151,635632,624844,654731,655316,663130,667519,674324,660260,657687,692815,
697181,697266,686079,682641,665309)
)
plot(X$value, type = "l")
FosterStuart(X$value)
sctest(XNextVar$value ~ predict(linearModel), type = "Chow", point = 3)
sctest(XNextVar$value ~ XNextVar$index, type = "Chow", point = 3)
